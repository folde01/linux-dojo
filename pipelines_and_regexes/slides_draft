- Introduction

- More things than you may think can be done efficiently (and for free) from the command line:
    - PDF editing (pdftk, poppler-utils);
    - image editing (e.g. imagemagick)
    - browsing the Internet (e.g. lynx)
    - Word processing (e.g. vim + Latex)
    - testing RESTful API (e.g. curl)

- This is made possible by the "Unix philosophy": many  little, robust programs that do one thing very well

- TIMTOWTDI (Tim Toady) - originally from the Perl community, but applies well to general Linux scripting in my opinion

- In contrast with Python's Zen: ""There should be one — and preferably only one — obvious way to do it." 


- Linux pipelines and functional programming
- String generator => S | S => S | S => S 
- String generator => S | S => S | S => S >> file.txt
- $(String generator => S | S => S | S => S >> file.txt)

Some typical string generators: 
$cat (to read from files)
$echo (to pass strings)
... but really, the sky is the limit!

#######################################################
Example 1:
Our manager asked us to make a short report of all the commits that were done for the code-dojo repository (https://github.com/folde01/linux-dojo).
Our manager tells us that the report must follow some specific format requirements:
- it should contain only the commit hash codes;
- it should contain only the first 6 digits;
- all of them must be all-caps;

We are also told that we need to create a command that sends us back to the first commit in the repository.
How can we do this with a one-liner?
#######################################################
    
